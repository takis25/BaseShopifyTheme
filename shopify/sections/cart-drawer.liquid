<div id="cart-drawer" class="cart-drawer">
  <div class="cart-drawer__overlay"></div>
  <div class="cart-drawer__content">
    <button class="cart-drawer__close">&times;</button>
    <h2>Your Cart</h2>
    <div class="cart-drawer__items">
      <!-- Skeleton Loaders -->
      <div class="cart-skeleton">
        <div class="skeleton-thumb"></div>
        <div class="skeleton-info">
          <div class="skeleton-line"></div>
          <div class="skeleton-line short"></div>
        </div>
      </div>
      <div class="cart-skeleton">
        <div class="skeleton-thumb"></div>
        <div class="skeleton-info">
          <div class="skeleton-line"></div>
          <div class="skeleton-line short"></div>
        </div>
      </div>
    </div>
    <div class="cart-drawer__footer">
      <p class="cart-drawer__subtotal"></p>
      <p class="cart-drawer__total"></p>
      <a href="/cart" class="btn">View Cart</a>
      <a href="/checkout" class="btn btn--primary">Checkout</a>
    </div>
  </div>
</div>

<!-- (CSS remains unchanged) -->

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const drawer = document.getElementById('cart-drawer');
    const overlay = drawer.querySelector('.cart-drawer__overlay');
    const closeBtn = drawer.querySelector('.cart-drawer__close');
    const itemsContainer = drawer.querySelector('.cart-drawer__items');
    const totalDisplay = drawer.querySelector('.cart-drawer__total');
    const subtotalDisplay = drawer.querySelector('.cart-drawer__subtotal');

    async function openCartDrawer() {
      drawer.classList.add('active');

      const skeletonHTML = `
        <div class="cart-skeleton">
          <div class="skeleton-thumb"></div>
          <div class="skeleton-info">
            <div class="skeleton-line"></div>
            <div class="skeleton-line short"></div>
          </div>
        </div>
      `;
      itemsContainer.innerHTML = skeletonHTML.repeat(2);

      subtotalDisplay.textContent = '';
      totalDisplay.textContent = '';

      try {
        const response = await fetch('/cart.js');
        await new Promise(resolve => setTimeout(resolve, 500)); // simulate loading delay
        const cart = await response.json();

        if (!cart || !Array.isArray(cart.items)) {
          throw new Error('Invalid cart data');
        }

        if (cart.items.length === 0) {
          itemsContainer.innerHTML = '<p>Your cart is empty.</p>';
          return;
        }

        itemsContainer.innerHTML = cart.items.map(item => `
          <div class="cart-item" data-line-item-id="${item.key}">
            <div class="cart-item__thumb">
              <img src="${item.image}" alt="${item.product_title}" />
            </div>
            <div class="cart-item__info">
              <p><strong>${item.product_title}</strong></p>
              <p>${(item.line_price / 100).toFixed(2)} ${cart.currency}</p>
              <div class="cart-item__actions">
                <div class="cart-item__quantity-wrapper">
                  <button class="quantity-btn decrease" data-key="${item.key}">-</button>
                  <input type="number" min="1" class="cart-item__quantity" value="${item.quantity}" data-key="${item.key}" />
                  <button class="quantity-btn increase" data-key="${item.key}">+</button>
                </div>
                <button class="remove-item" data-key="${item.key}">Remove</button>
              </div>
            </div>
          </div>
        `).join('');

        subtotalDisplay.textContent = `Subtotal: ${(cart.items_subtotal_price / 100).toFixed(2)} ${cart.currency}`;
        totalDisplay.textContent = `Total: ${(cart.total_price / 100).toFixed(2)} ${cart.currency}`;

        drawer.querySelectorAll('.remove-item').forEach(btn => {
          btn.addEventListener('click', () => {
            const key = btn.getAttribute('data-key');
            fetch('/cart/change.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({ id: key, quantity: 0 })
            }).then(() => openCartDrawer());
          });
        });

        drawer.querySelectorAll('.cart-item__quantity').forEach(input => {
          input.addEventListener('change', () => {
            const key = input.getAttribute('data-key');
            const quantity = parseInt(input.value);
            if (quantity > 0) {
              fetch('/cart/change.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                },
                body: JSON.stringify({ id: key, quantity })
              }).then(() => openCartDrawer());
            }
          });
        });

        drawer.querySelectorAll('.quantity-btn').forEach(button => {
          button.addEventListener('click', () => {
            const key = button.getAttribute('data-key');
            const input = drawer.querySelector(`input[data-key='${key}']`);
            let qty = parseInt(input.value);
            qty += button.classList.contains('increase') ? 1 : -1;
            if (qty < 1) qty = 1;
            input.value = qty;
            fetch('/cart/change.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({ id: key, quantity: qty })
            }).then(() => openCartDrawer());
          });
        });
      } catch (err) {
        console.error('Error loading cart:', err);
        itemsContainer.innerHTML = '<p>There was a problem loading your cart.</p>';
      }
    }

    function closeCartDrawer() {
      drawer.classList.remove('active');
    }

    window.openCartDrawer = openCartDrawer;
    overlay.addEventListener('click', closeCartDrawer);
    closeBtn.addEventListener('click', closeCartDrawer);
  });
</script>